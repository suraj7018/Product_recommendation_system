#Recommendation system using Flipkart dataset
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv('/content/flipkart_com-ecommerce_sample.csv')
df.sample(5)

# @title retail_price

from matplotlib import pyplot as plt
df['retail_price'].plot(kind='hist', bins=20, title='retail_price')
plt.gca().spines[['top', 'right',]].set_visible(False)

len(df['product_name'])
len(df['product_name'].unique()),len(df['uniq_id'].unique())
df.info()

df.describe()
df.shape
df['description'][2]
df.isna().sum()

from sklearn.feature_extraction.text import TfidfVectorizer
recom = TfidfVectorizer(max_features = None,
                      strip_accents = 'unicode',
                      analyzer = 'word',
                      min_df = 10,
                      token_pattern = r'\w{1,}',
                      ngram_range=(1,3),
                      stop_words='english')

df['description'] = df['description'].fillna('')

recom_matrix = recom.fit_transform(df['description'])
recom_matrix
recom_matrix.shape

from sklearn.metrics.pairwise import sigmoid_kernel
import pandas as pd
des = sigmoid_kernel(recom_matrix, recom_matrix)
des[0]

ind = pd.Series(df.index,index= df['product_name']).drop_duplicates()
ind.head(30)


def recommendation_system(title,des=des):
    index = ind[title]
    # Handle potential multiple indices
    if isinstance(index, pd.Series):
        index = index.iloc[0]  # Select the first index if multiple found
    des_scores = list(enumerate(des[index]))

    des_scores = sorted(des_scores, key= lambda x: x[1], reverse = True)
    des_scores = des_scores[1:11]
    item_indices = [i[0] for i in des_scores]
    return df['product_name'].iloc[item_indices]


user = input("Enter the name of the product: ")
print("\nProducts Recommended for you are: \n")
print(recommendation_system(user).unique())



